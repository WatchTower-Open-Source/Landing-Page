import jMoment from 'moment-jalaali';
import DefaultMomentUtils from '@date-io/moment';

var symbolMap = {
    1: "۱",
    2: "۲",
    3: "۳",
    4: "۴",
    5: "۵",
    6: "۶",
    7: "۷",
    8: "۸",
    9: "۹",
    0: "۰",
};
const defaultFormats = {
    dayOfMonth: "jD",
    fullDate: "jYYYY, jMMMM Do",
    fullDateWithWeekday: "dddd Do jMMMM jYYYY",
    fullDateTime: "jYYYY, jMMMM Do, hh:mm A",
    fullDateTime12h: "jD jMMMM hh:mm A",
    fullDateTime24h: "jD jMMMM HH:mm",
    fullTime: "LT",
    fullTime12h: "hh:mm A",
    fullTime24h: "HH:mm",
    hours12h: "hh",
    hours24h: "HH",
    keyboardDate: "jYYYY/jMM/jDD",
    keyboardDateTime: "jYYYY/jMM/jDD LT",
    keyboardDateTime12h: "jYYYY/jMM/jDD hh:mm A",
    keyboardDateTime24h: "jYYYY/jMM/jDD HH:mm",
    minutes: "mm",
    month: "jMMMM",
    monthAndDate: "jD jMMMM",
    monthAndYear: "jMMMM jYYYY",
    monthShort: "jMMM",
    weekday: "dddd",
    weekdayShort: "ddd",
    normalDate: "dddd, jD jMMM",
    normalDateWithWeekday: "DD MMMM",
    seconds: "ss",
    shortDate: "jD jMMM",
    year: "jYYYY",
};
class MomentUtils extends DefaultMomentUtils {
    constructor({ formats, instance } = {}) {
        super({ locale: "fa", instance });
        this.lib = "moment-jalaali";
        this.toJMoment = (date) => {
            return this.moment(date ? date.clone() : undefined).locale("fa");
        };
        this.parse = (value, format) => {
            if (value === "") {
                return null;
            }
            return this.moment(value, format, true).locale("fa");
        };
        this.date = (value) => {
            if (value === null) {
                return null;
            }
            return this.moment(value).locale("fa");
        };
        this.isBeforeYear = (date, value) => {
            return date.jYear() < value.jYear();
        };
        this.isAfterYear = (date, value) => {
            return date.jYear() > value.jYear();
        };
        this.getMonth = (date) => {
            return date.jMonth();
        };
        this.getDaysInMonth = (date) => {
            return date.daysInMonth();
        };
        this.startOfYear = (date) => {
            return date.clone().startOf("jYear");
        };
        this.endOfYear = (date) => {
            return date.clone().endOf("jYear");
        };
        this.startOfMonth = (date) => {
            return date.clone().startOf("jMonth");
        };
        this.endOfMonth = (date) => {
            return date.clone().endOf("jMonth");
        };
        this.getNextMonth = (date) => {
            return date.clone().add(1, "jMonth");
        };
        this.getPreviousMonth = (date) => {
            return date.clone().subtract(1, "jMonth");
        };
        this.getYear = (date) => {
            return date.jYear();
        };
        this.setYear = (date, year) => {
            return date.clone().jYear(year);
        };
        this.getDate = (date) => {
            return date.jDate();
        };
        this.setDate = (date, count) => {
            return date.clone().jDate(count);
        };
        this.getMeridiemText = (ampm) => {
            return ampm === "am"
                ? this.toJMoment().hours(2).format("A")
                : this.toJMoment().hours(14).format("A");
        };
        this.getWeekdays = () => {
            return [0, 1, 2, 3, 4, 5, 6].map((dayOfWeek) => {
                return this.toJMoment().weekday(dayOfWeek).format("dd");
            });
        };
        this.isEqual = (value, comparing) => {
            if (value === null && comparing === null) {
                return true;
            }
            return this.moment(value).isSame(comparing);
        };
        this.formatNumber = (num) => {
            return (num
                // safe cast because we are matching only digits
                .replace(/\d/g, (match) => symbolMap[match])
                .replace(/,/g, "،"));
        };
        this.getWeekArray = (date) => {
            const start = date.clone().startOf("jMonth").startOf("week");
            const end = date.clone().endOf("jMonth").endOf("week");
            let count = 0;
            let current = start;
            const nestedWeeks = [];
            while (current.isBefore(end)) {
                const weekNumber = Math.floor(count / 7);
                nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
                nestedWeeks[weekNumber].push(current);
                current = current.clone().add(1, "day");
                count += 1;
            }
            return nestedWeeks;
        };
        this.getYearRange = (start, end) => {
            const startDate = this.moment(start).startOf("jYear");
            const endDate = this.moment(end).endOf("jYear");
            const years = [];
            let current = startDate;
            while (current.isBefore(endDate)) {
                years.push(current);
                current = current.clone().add(1, "jYear");
            }
            return years;
        };
        this.moment = instance || jMoment;
        this.locale = "fa";
        this.formats = Object.assign({}, defaultFormats, formats);
    }
}

export { MomentUtils as default };
