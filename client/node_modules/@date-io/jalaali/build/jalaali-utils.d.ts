import Moment from "moment";
import jMoment from "moment-jalaali";
import DefaultMomentUtils from "@date-io/moment";
import { DateIOFormats } from "@date-io/core/IUtils";
interface Opts {
    instance?: typeof jMoment;
    formats?: Partial<DateIOFormats>;
}
type Moment = jMoment.Moment;
export default class MomentUtils extends DefaultMomentUtils {
    lib: string;
    moment: typeof jMoment;
    locale?: string;
    formats: DateIOFormats;
    constructor({ formats, instance }?: Opts);
    private toJMoment;
    parse: (value: string, format: string) => Moment.Moment | null;
    date: (value?: any) => Moment.Moment | null;
    isBeforeYear: (date: Moment, value: Moment) => boolean;
    isAfterYear: (date: Moment, value: Moment) => boolean;
    getMonth: (date: Moment) => number;
    getDaysInMonth: (date: Moment) => number;
    startOfYear: (date: Moment) => Moment.Moment;
    endOfYear: (date: Moment) => Moment.Moment;
    startOfMonth: (date: Moment) => Moment.Moment;
    endOfMonth: (date: Moment) => Moment.Moment;
    getNextMonth: (date: Moment) => Moment.Moment;
    getPreviousMonth: (date: Moment) => Moment.Moment;
    getYear: (date: Moment) => number;
    setYear: (date: Moment, year: number) => Moment.Moment;
    getDate: (date: Moment) => number;
    setDate: (date: Moment, count: number) => Moment.Moment;
    getMeridiemText: (ampm: "am" | "pm") => string;
    getWeekdays: () => string[];
    isEqual: (value: any, comparing: any) => boolean;
    formatNumber: (num: string) => string;
    getWeekArray: (date: Moment) => Moment.Moment[][];
    getYearRange: (start: Moment, end: Moment) => Moment.Moment[];
}
export {};
