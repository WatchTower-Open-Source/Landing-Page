import * as React from 'react';
import { AllSeriesType } from '../models/seriesType';
import { ChartSeriesType, DatasetType, FormatterParams, FormatterResult } from '../models/seriesType/config';
import { ChartsColorPalette } from '../colorPalettes';
import { Initializable } from './context.types';
export type SeriesFormatterType<T extends ChartSeriesType> = (series: AllSeriesType<T>[], colors: string[], dataset?: DatasetType) => {
    [type in T]?: FormatterResult<type>;
};
export type SeriesContextProviderProps<T extends ChartSeriesType = ChartSeriesType> = {
    dataset?: DatasetType;
    /**
     * The array of series to display.
     * Each type of series has its own specificity.
     * Please refer to the appropriate docs page to learn more about it.
     */
    series: AllSeriesType<T>[];
    /**
     * Color palette used to colorize multiple series.
     * @default blueberryTwilightPalette
     */
    colors?: ChartsColorPalette;
    /**
     * Preprocessors for each series types.
     */
    seriesFormatters: SeriesFormatterConfig<T>;
    children: React.ReactNode;
};
export type FormattedSeries = {
    [type in ChartSeriesType]?: FormatterResult<type>;
};
export declare const SeriesContext: React.Context<Initializable<FormattedSeries>>;
export type SeriesFormatterConfig<T extends ChartSeriesType = ChartSeriesType> = {
    [K in T]?: (series: FormatterParams<K>, dataset?: DatasetType) => any;
};
declare function SeriesContextProvider<T extends ChartSeriesType>(props: SeriesContextProviderProps<T>): React.JSX.Element;
export { SeriesContextProvider };
